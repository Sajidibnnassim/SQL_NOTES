Basic SQL Queries:
1. How do you retrieve all records from a table?
2. How can you fetch only distinct values in SQL?
3. What is the difference between WHERE and HAVING clauses?
4. How do you sort the results of a query in ascending or descending order?
5. Explain the LIMIT clause and its use.
6. How can you count the number of records in a table?
7. What is the purpose of the GROUP BY clause?
8. How do you filter data using multiple conditions?
9. What is the IN operator and how is it used?
10. How do you update a specific record in a table?

Joins:
1. What are the different types of joins in SQL?
2. Explain the difference between INNER JOIN and OUTER JOIN.
3. How does a LEFT JOIN work?
4. What is a CROSS JOIN and when would you use it?
5. Can you explain the use of a SELF JOIN?
6. What is the difference between UNION and UNION ALL?
7. How can you retrieve matching and non-matching records from two tables?
8. Explain how to join more than two tables.
9. What is the importance of the ON clause in a JOIN?
10. How do you handle null values when performing joins?

Subqueries:
1. What is a subquery in SQL?
2. How do you use a subquery in a WHERE clause?
3. Can you explain the difference between a correlated and a non-correlated subquery?
4. How can you return multiple values from a subquery?
5. Explain the use of subqueries in the SELECT clause.
6. What are scalar subqueries and how are they used?
7. How do you perform a DELETE operation using a subquery?
8. What are the limitations of subqueries?
9. Can subqueries be used with JOIN? How?
10. What is the impact of subqueries on performance?

Indexes:
1. What is an index in SQL?
2. How do indexes improve query performance?
3. Explain the difference between a clustered and a non-clustered index.
4. How do you create an index on a table?
5. What are the advantages and disadvantages of using indexes?
6. How can you check if an index is being used in a query?
7. Explain the concept of composite indexes.
8. How does indexing affect INSERT, UPDATE, and DELETE operations?
9. When should you avoid using indexes?
10. How do you remove an index from a table?

Transactions:
1. What is a transaction in SQL?
2. Explain the ACID properties of a transaction.
3. How do you start and end a transaction?
4. What is the purpose of the COMMIT and ROLLBACK commands?
5. How can you ensure data consistency in transactions?
6. Explain the concept of transaction isolation levels.
7. What is a deadlock and how do you prevent it in transactions?
8. How can you implement a save point in a transaction?
9. What is the difference between explicit and implicit transactions?
10. How do transactions work in a distributed database environment?

Normalization and Database Design:
1. What is normalization in database design?
2. Explain the different normal forms with examples.
3. What is denormalization and when is it used?
4. How do you handle many-to-many relationships in database design?
5. What is a primary key and why is it important?
6. Explain the concept of foreign keys and referential integrity.
7. How do you design a database schema for a new application?
8. What are the common pitfalls in database design?
9. How do you ensure scalability in a database design?
10. What is the importance of indexing in database design?



=================================================================================

Basic SQL Queries:
1.
Use the SELECT statement without any condition:
  SELECT * FROM table_name;

2.
Use the DISTINCT keyword to remove duplicates:
  SELECT DISTINCT column_name FROM table_name;

3.
WHERE: Filters rows before grouping; used with individual rows.
  HAVING: Filters groups after aggregation; used with GROUP BY.
 
 -Using WHERE to filter individual rows
  SELECT * FROM employees WHERE department = 'Sales';
 -Using HAVING to filter aggregated groups
  SELECT department, COUNT(*) FROM employees
  GROUP BY department
  HAVING COUNT(*) > 10;

4.
Use the ORDER BY clause:
-Ascending order (default)
 SELECT * FROM employees ORDER BY salary;

-Descending order
 SELECT * FROM employees ORDER BY salary DESC;

5.
The LIMIT clause restricts the number of rows returned:
  SELECT * FROM employees LIMIT 5;

6.
Use the COUNT function:
 SELECT COUNT(*) FROM employees;

7.
The GROUP BY clause groups rows with the same values in specified columns, often used with aggregate functions:
  SELECT department, COUNT(*) FROM employees
  GROUP BY department;

8.
Use AND or OR to combine multiple conditions in the WHERE clause:
-Using AND
SELECT * FROM employees WHERE department = 'Sales' AND salary > 50000;
-Using OR
 SELECT * FROM employees WHERE department = 'Sales' OR department = 'Marketing';

9.
The IN operator checks if a value matches any value in a list:
  SELECT * FROM employees WHERE department IN ('Sales', 'Marketing', 'HR');

10.
Use the UPDATE statement with a WHERE clause to target specific rows:
  UPDATE employees 
  SET salary = 60000 
  WHERE employee_id = 101;
--------------------------------------------------------------------------------------------------------------------
Joins:

1.
The main types of joins in SQL are:
INNER JOIN: Returns only the matching rows between tables.
OUTER JOIN:
LEFT JOIN: All rows from the left table + matching rows from the right.
RIGHT JOIN: All rows from the right table + matching rows from the left.
FULL JOIN: Returns all rows when there is a match in one of the tables, including non-matching rows from both.
CROSS JOIN: Returns the Cartesian product of the two tables.
SELF JOIN: Joins a table to itself.

2.
INNER JOIN returns only rows with matching values in both tables.
Example: SELECT * FROM A INNER JOIN B ON A.id = B.id;
OUTER JOIN includes rows even if there are no matches.
LEFT JOIN: Includes all rows from the left table.
RIGHT JOIN: Includes all rows from the right table.
FULL JOIN: Includes all rows from both tables, with NULL for non-matching rows.

3.
A LEFT JOIN returns all rows from the left table and the matching rows from the right table. If there is no match, the result will contain NULL in columns from the right table.
SELECT A.id, A.name, B.salary 
FROM Employees A 
LEFT JOIN Salaries B ON A.id = B.emp_id;
NOTE: If some employees don’t have a salary recorded, their salary value will appear as NULL.

4.
A CROSS JOIN produces the Cartesian product of two tables, meaning each row from the first table is combined with every row from the second.
Use case: When you need all possible combinations of two datasets.
SELECT * FROM A CROSS JOIN B;
NOTE: For example, combining product and store tables to analyze every product in each store.

5.
A SELF JOIN is when a table is joined with itself, usually with aliases to differentiate between the two references.
SELECT A.employee_id, A.name, B.name AS manager_name
FROM Employees A 
JOIN Employees B ON A.manager_id = B.employee_id;
This retrieves each employee and their respective manager’s name from the same table.

6.
UNION combines the result sets of two queries, removing duplicates.
UNION ALL combines the result sets without removing duplicates (faster).
SELECT name FROM Employees 
UNION ALL 
SELECT name FROM Customers;

7.
To retrieve both matching and non-matching records, you can use:
LEFT JOIN for non-matching rows from the left table.
RIGHT JOIN for non-matching rows from the right table.
FULL JOIN for non-matching rows from both tables.

SELECT A.id, A.name, B.salary 
FROM Employees A 
FULL OUTER JOIN Salaries B ON A.id = B.emp_id;

This will return all employees and salaries, including those without matches.

8.
To join more than two tables, you chain multiple joins together, using the ON clause to specify matching conditions.

SELECT A.name, B.salary, C.department 
FROM Employees A 
JOIN Salaries B ON A.id = B.emp_id 
JOIN Departments C ON A.dept_id = C.id;

9.
The ON clause specifies the condition on which the tables should be joined. It determines how rows from two tables are matched.
Without the ON clause, CROSS JOIN behavior occurs (i.e., a Cartesian product).

10.
To handle NULL values:
Use COALESCE() to replace NULLs with a default value.
Use IS NULL or IS NOT NULL to filter rows containing NULLs.

SELECT A.id, COALESCE(B.salary, 0) AS salary 
FROM Employees A 
LEFT JOIN Salaries B ON A.id = B.emp_id;

NOTE: This replaces NULL salaries with 0 for employees without recorded salaries.

--------------------------------------------------------------------------------------------------------------------
Subqueries:

1.
A subquery is a query nested inside another SQL query. It can reside within SELECT, FROM, WHERE, HAVING, or other clauses.
SELECT name 
FROM employees 
WHERE department_id = (SELECT id FROM departments WHERE name = 'HR');

2.
A subquery in the WHERE clause returns values used to filter results of the outer query. The operator with the subquery can be =, IN, NOT IN, or EXISTS.
SELECT name 
FROM employees 
WHERE department_id IN (SELECT id FROM departments WHERE location = 'New York');

3.
-Non-correlated Subquery: The inner query executes independently of the outer query.
SELECT name 
FROM employees 
WHERE salary > (SELECT AVG(salary) FROM employees);

-Correlated Subquery: The inner query depends on each row of the outer query and executes once for each row.
SELECT e.name 
FROM employees e 
WHERE e.salary > (SELECT AVG(salary) FROM employees WHERE department_id = e.department_id);

3.
You can return multiple values (rows) with subqueries in combination with IN or EXISTS.
SELECT name 
FROM employees 
WHERE department_id IN (SELECT id FROM departments WHERE location = 'Chicago');

4.
Subqueries in the SELECT clause compute a derived value for each row.
SELECT name, (SELECT AVG(salary) FROM employees) AS average_salary
FROM employees;

5.
A scalar subquery returns a single value and can be used where a value or expression is expected.
SELECT name, (SELECT MAX(salary) FROM employees) AS max_salary
FROM employees;

6.
A scalar subquery returns a single value and can be used where a value or expression is expected.
SELECT name, (SELECT MAX(salary) FROM employees) AS max_salary
FROM employees;

7.
You can use a subquery in a DELETE statement to identify which rows to delete.
DELETE FROM employees 
WHERE department_id = (SELECT id FROM departments WHERE name = 'HR');

8.
Performance Issues: Subqueries can be slower than joins, especially for correlated subqueries.
Limited Returns: Some subqueries can only return scalar or a certain number of rows.
Syntax Constraints: In some databases, not all subqueries are allowed in every clause.

9.
Subqueries can complement JOIN operations by filtering data or generating aggregated results used in the join condition.
SELECT e.name, d.name 
FROM employees e 
JOIN (SELECT id, name FROM departments WHERE location = 'NY') d 
ON e.department_id = d.id;

10.
Performance Concerns: Subqueries, especially correlated ones, can slow down queries due to multiple executions.
Optimization: In some cases, using JOIN instead of subqueries improves performance.
Indexes: Proper indexing on columns used in subqueries can help mitigate performance issues.

--------------------------------------------------------------------------------------------------------------------
Indexes:

1.
An index in SQL is a data structure that improves the speed of data retrieval on a database table.
It functions similarly to an index in a book, making searches more efficient by creating a "shortcut" to the desired rows in the table.

2.
Indexes improve query performance by:
Reducing the amount of data the database needs to scan.
Allowing the database engine to quickly locate the rows matching a query's criteria, rather than scanning the entire table (called full table scan).
Sorting data in advance, which speeds up ORDER BY and GROUP BY operations.

3.
Clustered Index:
Sorts and stores the actual data rows of the table based on the indexed column(s).
A table can have only one clustered index because the data itself is arranged physically in that order.
Example: A clustered index on id will store the rows in ascending order of id.

Non-Clustered Index:
Stores a separate structure with pointers to the original data rows in the table.
A table can have multiple non-clustered indexes.
Example: A non-clustered index on a column like email stores the indexed keys and references to the data locations.

4.
-Syntax for a simple index:
CREATE INDEX idx_column_name ON table_name (column_name);

-Example: Create an index on the 'last_name' column of the 'employees' table:
CREATE INDEX idx_last_name ON employees (last_name);

-Syntax for a unique index:
CREATE UNIQUE INDEX idx_email_unique ON employees (email);

5.
Advantages:
Faster queries: Significantly improves SELECT query performance.
Better sorting: Speeds up ORDER BY and GROUP BY operations.
Quick lookups: Optimizes searches with conditions like WHERE.

Disadvantages:
Storage cost: Indexes take up additional space.
Slower DML operations: INSERT, UPDATE, and DELETE operations become slower due to index maintenance.
Over-indexing: Too many indexes can degrade performance.

6.
Use EXPLAIN or EXPLAIN ANALYZE to analyze a query’s execution plan.
EXPLAIN SELECT * FROM employees WHERE last_name = 'Smith';

NOTE:The output will indicate if the query is using an index scan.

7.
A composite index is an index on multiple columns.
CREATE INDEX idx_name_age ON employees (last_name, age);

Composite indexes are useful when queries frequently use multiple columns in the WHERE clause.
Leftmost prefix rule: For the above index, queries on last_name or on both last_name and age will benefit, but not on age alone.

8.
INSERT: Slower because the index must be updated with new data.
UPDATE: If indexed columns are modified, the index must be rebuilt, making the operation slower.
DELETE: Requires the index to delete references, adding overhead.

9.
On small tables: A full table scan might be faster.
On frequently updated tables: Index maintenance overhead can degrade performance.
On columns with high data uniqueness: Indexing a column with almost unique values (like ID) may have little benefit.
On columns with a lot of NULLs or identical values.

10.
-Syntax to drop an index:
DROP INDEX idx_column_name;

-Example: Remove the index on the 'last_name' column:
DROP INDEX idx_last_name;

NOTE: For some databases (like MySQL), the syntax may vary slightly:
ALTER TABLE employees DROP INDEX idx_last_name;

--------------------------------------------------------------------------------------------------------------------
Transactions:
--------------------------------------------------------------------------------------------------------------------
Normalization and Database Design:
--------------------------------------------------------------------------------------------------------------------
